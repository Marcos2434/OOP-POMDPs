mdp

formula target = s =3;


formula initialized = 
x00 >= 0 &
x01 >= 0 &
x10 >= 0 &
x11 >= 0 &
x20 >= 0 &
x21 >= 0 &
x40 >= 0 &
x41 >= 0 &
x50 >= 0 &
x51 >= 0 &
x60 >= 0 &
x61 >= 0 &
x0 >= 0 &
x1 >= 0 &
y0 >= 0 &
y1 >= 0 &
y2 >= 0 &
y4 >= 0 &
y5 >= 0 &
y6 >= 0 &
true;


module line
		s : [0..6];
		started : bool;
		x00 : [-1..1] init -1;
		x01 : [-1..1] init -1;
		x10 : [-1..1] init -1;
		x11 : [-1..1] init -1;
		x20 : [-1..1] init -1;
		x21 : [-1..1] init -1;
		x40 : [-1..1] init -1;
		x41 : [-1..1] init -1;
		x50 : [-1..1] init -1;
		x51 : [-1..1] init -1;
		x60 : [-1..1] init -1;
		x61 : [-1..1] init -1;
		x0 : [-1..1] init -1;
		x1 : [-1..1] init -1;
		y0: [-1..1] init -1;
		y1: [-1..1] init -1;
		y2: [-1..1] init -1;
		y4: [-1..1] init -1;
		y5: [-1..1] init -1;
		y6: [-1..1] init -1;



		// CHOICE OF OBSERVATIONS
		[y0y1y2] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=1) & (y2'=1) & (y4'=0) & (y5'=0) & (y6'=0);
		[y0y1y4] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=1) & (y2'=0) & (y4'=1) & (y5'=0) & (y6'=0);
		[y0y1y5] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=1) & (y2'=0) & (y4'=0) & (y5'=1) & (y6'=0);
		[y0y1y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=1) & (y2'=0) & (y4'=0) & (y5'=0) & (y6'=1);
		[y0y2y4] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=0) & (y2'=1) & (y4'=1) & (y5'=0) & (y6'=0);
		[y0y2y5] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=0) & (y2'=1) & (y4'=0) & (y5'=1) & (y6'=0);
		[y0y2y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=0) & (y2'=1) & (y4'=0) & (y5'=0) & (y6'=1);
		[y0y4y5] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=0) & (y2'=0) & (y4'=1) & (y5'=1) & (y6'=0);
		[y0y4y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=0) & (y2'=0) & (y4'=1) & (y5'=0) & (y6'=1);
		[y0y5y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=1) & (y1'=0) & (y2'=0) & (y4'=0) & (y5'=1) & (y6'=1);
		[y1y2y4] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=1) & (y2'=1) & (y4'=1) & (y5'=0) & (y6'=0);
		[y1y2y5] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=1) & (y2'=1) & (y4'=0) & (y5'=1) & (y6'=0);
		[y1y2y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=1) & (y2'=1) & (y4'=0) & (y5'=0) & (y6'=1);
		[y1y4y5] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=1) & (y2'=0) & (y4'=1) & (y5'=1) & (y6'=0);
		[y1y4y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=1) & (y2'=0) & (y4'=1) & (y5'=0) & (y6'=1);
		[y1y5y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=1) & (y2'=0) & (y4'=0) & (y5'=1) & (y6'=1);
		[y2y4y5] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=0) & (y2'=1) & (y4'=1) & (y5'=1) & (y6'=0);
		[y2y4y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=0) & (y2'=1) & (y4'=1) & (y5'=0) & (y6'=1);
		[y2y5y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=0) & (y2'=1) & (y4'=0) & (y5'=1) & (y6'=1);
		[y4y5y6] (!initialized & y0 =-1 & y1 =-1 & y2 =-1 & y4 =-1 & y5 =-1 & y6 =-1) -> (y0'=0) & (y1'=0) & (y2'=0) & (y4'=1) & (y5'=1) & (y6'=1);
		
		// CHOICE OF STRATEGY
		
		[x00] (!initialized & x00 =-1 & x01 =-1) -> (x00' =1) & (x01'=0);
		[x01] (!initialized & x00 =-1 & x01 =-1) -> (x00' =0) & (x01'=1);
		[x10] (!initialized & x10 =-1 & x11 =-1) -> (x10' =1) & (x11'=0);
		[x11] (!initialized & x10 =-1 & x11 =-1) -> (x10' =0) & (x11'=1);
		[x20] (!initialized & x20 =-1 & x21 =-1) -> (x20' =1) & (x21'=0);
		[x21] (!initialized & x20 =-1 & x21 =-1) -> (x20' =0) & (x21'=1);
		[x40] (!initialized & x40 =-1 & x41 =-1) -> (x40' =1) & (x41'=0);
		[x41] (!initialized & x40 =-1 & x41 =-1) -> (x40' =0) & (x41'=1);
		[x50] (!initialized & x50 =-1 & x51 =-1) -> (x50' =1) & (x51'=0);
		[x51] (!initialized & x50 =-1 & x51 =-1) -> (x50' =0) & (x51'=1);
		[x60] (!initialized & x60 =-1 & x61 =-1) -> (x60' =1) & (x61'=0);
		[x61] (!initialized & x60 =-1 & x61 =-1) -> (x60' =0) & (x61'=1);
		[x0] (!initialized & x0 =-1 & x1 =-1) -> (x0' =1) & (x1'=0);
		[x1] (!initialized & x0 =-1 & x1 =-1) -> (x0' =0) & (x1'=1);


		[] !started & initialized -> 1/6: (started' = true) & (s' = 0)
			+ 1/6 : (started'=true) & (s'=1)
			+ 1/6 : (started'=true) & (s'=2)
			+ 1/6 : (started'=true) & (s'=4)
			+ 1/6 : (started'=true) & (s'=5)
			+ 1/6 : (started'=true) & (s'=6);

		[move] s=0 & started  -> (1 - y0)*x0 + y0*x00: (s'=0) + (1 - y0)*x1 + y0*x01: (s'=1);
		[move] s=1 & started  -> (1 - y1)*x0 + y1*x10: (s'=0) + (1 - y1)*x1 + y1*x11: (s'=2);
		[move] s=2 & started  -> (1 - y2)*x0 + y2*x20: (s'=1) + (1 - y2)*x1 + y2*x21: (s'=3);
		[move] s=3 & started  -> (s' = s); 
		[move] s=4 & started  -> (1 - y4)*x0 + y4*x40: (s'=3) + (1 - y4)*x1 + y4*x41: (s'=5);
		[move] s=5 & started  -> (1 - y5)*x0 + y5*x50: (s'=4) + (1 - y5)*x1 + y5*x51: (s'=6);
		[move] s=6 & started  -> (1 - y6)*x0 + y6*x60: (s'=5) + (1 - y6)*x1 + y6*x61: (s'=6);
endmodule

rewards
		[move] !target : 1;
endrewards